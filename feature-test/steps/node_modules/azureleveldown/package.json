{
  "name": "azureleveldown",
  "description": "An implementation of LevelDown for Windows Azure Table Storage",
  "version": "0.0.3",
  "authors": [
    "richard.astbury"
  ],
  "keywords": [
    "leveldb",
    "leveldown",
    "levelup",
    "azure"
  ],
  "main": "./index.js",
  "repository": {
    "type": "git",
    "url": "https://github.com/richorama/azureleveldown.git"
  },
  "dependencies": {
    "abstract-leveldown": "~0.11.2",
    "azure": "~0.8.1",
    "bops": "~0.1.1"
  },
  "devDependencies": {
    "tap": "*",
    "sinon": "*",
    "rimraf": "*"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/richorama/azureleveldown/issues"
  },
  "homepage": "https://github.com/richorama/azureleveldown",
  "scripts": {
    "test": "node ./test.js"
  },
  "author": {
    "name": "richard.astbury"
  },
  "readme": "# azureleveldown\n\n**A drop-in replacement for [LevelDOWN](https://github.com/rvagg/node-leveldown) which persists data in [Windows Azure Table Storage](http://www.windowsazure.com/en-us/documentation/articles/storage-nodejs-how-to-use-table-storage/). Can be used as a back-end for [LevelUP](https://github.com/rvagg/node-levelup) rather than an actual LevelDB store.**\n\nAs of version 0.7, LevelUP allows you to pass a `'db'` option when you create a new instance. This will override the default LevelDOWN store with a LevelDOWN API compatible object. \n\n## Installation\n\n```\nnpm install azureleveldown levelup\n```\n\n## Example\n\n```js\nvar connection = 'DefaultEndpointsProtocol=https;AccountName=xxx;AccountKey=yyy'\n\nvar levelup = require('levelup');\nvar LevelAzureDown = require('azureleveldown');\n\nvar db = levelup(connection, {\n  // the 'db' option replaces LevelDOWN\n  db: function (connection) { \n    return new LevelAzureDown(connection) \n  }\n})\n\n// An azureleveldown db works within a single table and partition. \n// These can be controlled by passing some settings into the contsuctor \n\n\nvar db = levelup(connection, {\n  db: function (connection) { \n    return new LevelAzureDown(connection,  {table:\"table1\", partitionKey: \"partition1\"}) \n  }\n})\n\n// reading & writing data is done using the normal 'level' way:\n\ndb.put('my_key', 'my value', function(err){ ... });\n\ndb.get('my_key', function(err, data){ \n\tconsole.log(data.key + \" = \" + data.value);\n});\n\ndb.del('another_key', function(err){ ... });\n\ndb.readStream()\n  .on('data', console.log)\n  .on('close', function () { console.log('the end') })\n```\n\n## Known Limitiations\n\n* `reverse` read streams are not currently supported\n* Only text (utf8) keys and values are supported\n* The table storage limits for key and value sizes (1KB / 64KB respectively)\n\n## Licence\n\nMIT",
  "readmeFilename": "README.md",
  "_id": "azureleveldown@0.0.3",
  "_from": "azureleveldown@"
}
